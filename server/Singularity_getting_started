reating a Singularity Image
Singularity images are created using the singularity bootstrap command and a definition file. There are basic definition files for different distributions of Linux in the exmpales direcotry(https://github.com/gmkurtzer/singularity/tree/master/examples) of the Singularity repository (https://github.com/gmkurtzer/singularity). 
Here we'll create an image with the Julia interpreter from its Ubuntu repositories.
First, create the definition file. Here is a file named ubuntu-julia.def.
DistType "debian"
MirrorURL "http://us.archive.ubuntu.com/ubuntu/"
OSVersion "trusty"

Setup
Bootstrap

RunCmd sed -i 's/$/ universe/' /etc/apt/sources.list
InstallPkgs software-properties-common

RunCmd add-apt-repository ppa:staticfloat/juliareleases
RunCmd add-apt-repository ppa:staticfloat/julia-deps
RunCmd apt-get update

InstallPkgs vim
InstallPkgs julia

Cleanup
Next we create an empty image; these are sparse files that will grow to a maximum size. The default maximum size is 1GB but this can adjusted using the --size option.
rpwagner@ubuntu-laptop:~$ sudo singularity create ubuntu-julia.img
Creating a sparse image with a maximum size of 1024MiB...
Using given image size of 1024
Formatting image (/sbin/mkfs.ext3)
Done. Image can be found at: ubuntu-julia.img
rpwagner@ubuntu-laptop:~$
The final step is to deploy the desired environment into the image by specifying the defition file. (This can take a while.)
rpwagner@ubuntu-laptop:~$ sudo singularity bootstrap ubuntu-julia.img ubuntu-julia.def
I: Retrieving Release 
I: Retrieving Release.gpg 
...snip...
Processing triggers for libc-bin (2.19-0ubuntu6) ...
+ apt-get clean
rpwagner@ubuntu-laptop:~$
Running a Singularity Image
Singularity is installed on all of the Comet nodes login, compute, GPU, and large memory, and can run on all of them. Any existing constraint, such as the memory and thread limits on the login nodes, still apply. Currenly, we've tested multi-threaded Singularity application on a single node, but Singularity can run parallel (MPI) applications using Open MPI and we'll update this documentation after we've tested it.
This example shows the Julia container being used to run a simple examlpe with two threads on a standard Comet compute node using the singularity shell command. You can also execute applications within the container for scripting.
Before running your container you'll need to get it to Comet using Globus, scp, etc. Once it's there you load the singularity module into your environment and start your shell.
[rpwagner@comet-14-01 ~]$ module load singularity
[rpwagner@comet-14-01 ~]$ singularity shell ubuntu-julia.img                                                        
Singularity/ubuntu-julia.img> julia -p 2                                        
You can still access your data in the containerized environment.
Singularity/ubuntu-julia.img> ls
a.out    hello.jl
cpi      mkrandfile
cpi.c    mkrandfile.c
data     ubuntu-julia.img
hello.c
Finally, you can start your containerized application inside the shell.
Singularity/ubuntu-julia.img> julia -p 2                                        
               _                                                                
   _       _ _(_)_     |  A fresh approach to technical computing               
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org              
   _ _   _| |_  __ _   |  Type "?help" for help.                                
  | | | | | | |/ _` |  |                                                        
  | | |_| | | | (_| |  |  Version 0.4.6 (2016-06-19 17:16 UTC)                  
 _/ |\__'_|_|_|\__'_|  |  Official http://julialang.org release                 
|__/                   |  x86_64-linux-gnu                                      
                                                                                
julia> r = remotecall(2, rand, 2, 2)                                            
RemoteRef{Channel{Any}}(2,1,3)                                                  
                                                                                
julia> fetch(r)                                                                 
2x2 Array{Float64,2}:                                                           
 0.378121  0.672814                                                             
 0.676299  0.378439                                                             
                                                                                
julia> s = @spawnat 2 1 .+ fetch(r)                                             
RemoteRef{Channel{Any}}(2,1,5)                                                  
                                                                                
julia> fetch(s)                                                                 
2x2 Array{Float64,2}:                                                           
 1.37812  1.67281                                                               
 1.6763   1.37844                                                               
                                                                                
julia>


